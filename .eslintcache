[{"E:\\reactjs\\jobszone\\src\\index.js":"1","E:\\reactjs\\jobszone\\src\\App.js":"2","E:\\reactjs\\jobszone\\src\\reportWebVitals.js":"3","E:\\reactjs\\jobszone\\src\\components\\Search.js":"4","E:\\reactjs\\jobszone\\src\\screens\\CreateJobScreen.js":"5","E:\\reactjs\\jobszone\\src\\screens\\InternshipDetailsScreen.js":"6","E:\\reactjs\\jobszone\\src\\screens\\CreateInternshipScreen.js":"7","E:\\reactjs\\jobszone\\src\\screens\\JobDetailsScreen.js":"8","E:\\reactjs\\jobszone\\src\\screens\\ApplyJobScreen.js":"9","E:\\reactjs\\jobszone\\src\\screens\\JobScreen.js":"10","E:\\reactjs\\jobszone\\src\\components\\Footer.js":"11","E:\\reactjs\\jobszone\\src\\components\\CreateJobForm.js":"12","E:\\reactjs\\jobszone\\src\\components\\InternshipDetails.js":"13","E:\\reactjs\\jobszone\\src\\components\\JobCard.js":"14","E:\\reactjs\\jobszone\\src\\components\\CreateInternshipForm.js":"15","E:\\reactjs\\jobszone\\src\\components\\ApplyJobForm.js":"16","E:\\reactjs\\jobszone\\src\\components\\Header.js":"17","E:\\reactjs\\jobszone\\src\\components\\JobDetails.js":"18","E:\\reactjs\\jobszone\\src\\aws-exports.js":"19","E:\\reactjs\\jobszone\\src\\screens\\ProfileScreen.js":"20","E:\\reactjs\\jobszone\\src\\components\\ViewProfile.js":"21","E:\\reactjs\\jobszone\\src\\graphql\\queries.js":"22","E:\\reactjs\\jobszone\\src\\screens\\FirstRegisterScreen.js":"23","E:\\reactjs\\jobszone\\src\\components\\FirstRegister.js":"24","E:\\reactjs\\jobszone\\src\\graphql\\mutations.js":"25","E:\\reactjs\\jobszone\\src\\screens\\EditProfileScreen.js":"26","E:\\reactjs\\jobszone\\src\\components\\EditProfile.js":"27","E:\\reactjs\\jobszone\\src\\mutations.js":"28","E:\\reactjs\\jobszone\\src\\screens\\InternshipScreen.js":"29","E:\\reactjs\\jobszone\\src\\components\\InternshipCard.js":"30","E:\\reactjs\\jobszone\\src\\screens\\CompanyScreen.js":"31","E:\\reactjs\\jobszone\\src\\screens\\ViewAllJobsScreen.js":"32","E:\\reactjs\\jobszone\\src\\screens\\ViewAllInternshipsScreen.js":"33","E:\\reactjs\\jobszone\\src\\screens\\ViewJobApplicantsScreen.js":"34","E:\\reactjs\\jobszone\\src\\components\\MyAppications.js":"35","E:\\reactjs\\jobszone\\src\\screens\\MyAppicationsScreen.js":"36","E:\\reactjs\\jobszone\\src\\screens\\JobSearchScreen.js":"37","E:\\reactjs\\jobszone\\src\\components\\CompanyRegister.js":"38","E:\\reactjs\\jobszone\\src\\components\\EditCompanyProfile.js":"39","E:\\reactjs\\jobszone\\src\\screens\\AdminScreen.js":"40","E:\\reactjs\\jobszone\\src\\screens\\ViewAdminJobsScreen.js":"41","E:\\reactjs\\jobszone\\src\\screens\\ViewAdminInternshipsScreen.js":"42","E:\\reactjs\\jobszone\\src\\screens\\ViewAdminJobApplicantScreen.js":"43","E:\\reactjs\\jobszone\\src\\screens\\ViewJobRequestsScreen.js":"44","E:\\reactjs\\jobszone\\src\\screens\\ViewAllUsersScreen.js":"45","E:\\reactjs\\jobszone\\src\\screens\\ViewAllCompaniesScreen.js":"46","E:\\reactjs\\jobszone\\src\\screens\\EditJobScreen.js":"47","E:\\reactjs\\jobszone\\src\\components\\EditJobForm.js":"48","E:\\reactjs\\jobszone\\src\\components\\EditInternshipForm.js":"49","E:\\reactjs\\jobszone\\src\\screens\\EditInternshipScreen.js":"50","E:\\reactjs\\jobszone\\src\\screens\\ViewAllJobApplicantsScreen.js":"51"},{"size":559,"mtime":1612867992945,"results":"52","hashOfConfig":"53"},{"size":4287,"mtime":1612869497523,"results":"54","hashOfConfig":"53"},{"size":375,"mtime":1612867992947,"results":"55","hashOfConfig":"53"},{"size":798,"mtime":1612867992900,"results":"56","hashOfConfig":"53"},{"size":437,"mtime":1612867992950,"results":"57","hashOfConfig":"53"},{"size":402,"mtime":1612867992954,"results":"58","hashOfConfig":"53"},{"size":473,"mtime":1612867992949,"results":"59","hashOfConfig":"53"},{"size":367,"mtime":1612867992955,"results":"60","hashOfConfig":"53"},{"size":433,"mtime":1612867992948,"results":"61","hashOfConfig":"53"},{"size":1683,"mtime":1612867992956,"results":"62","hashOfConfig":"53"},{"size":1798,"mtime":1612867992880,"results":"63","hashOfConfig":"53"},{"size":10810,"mtime":1612869611084,"results":"64","hashOfConfig":"53"},{"size":3684,"mtime":1612867992885,"results":"65","hashOfConfig":"53"},{"size":1948,"mtime":1612867992887,"results":"66","hashOfConfig":"53"},{"size":12871,"mtime":1612869611084,"results":"67","hashOfConfig":"53"},{"size":7847,"mtime":1612869611088,"results":"68","hashOfConfig":"53"},{"size":2890,"mtime":1612867992882,"results":"69","hashOfConfig":"53"},{"size":3910,"mtime":1612867992889,"results":"70","hashOfConfig":"53"},{"size":839,"mtime":1612793190210,"results":"71","hashOfConfig":"53"},{"size":441,"mtime":1612867992981,"results":"72","hashOfConfig":"53"},{"size":2828,"mtime":1612867992901,"results":"73","hashOfConfig":"53"},{"size":16967,"mtime":1612867992909,"results":"74","hashOfConfig":"53"},{"size":1831,"mtime":1612867992953,"results":"75","hashOfConfig":"53"},{"size":5862,"mtime":1612869732458,"results":"76","hashOfConfig":"53"},{"size":22981,"mtime":1612867992907,"results":"77","hashOfConfig":"53"},{"size":1291,"mtime":1612867992952,"results":"78","hashOfConfig":"53"},{"size":6705,"mtime":1612869611216,"results":"79","hashOfConfig":"53"},{"size":474,"mtime":1612373152660,"results":"80","hashOfConfig":"53"},{"size":1748,"mtime":1612867992955,"results":"81","hashOfConfig":"53"},{"size":1965,"mtime":1612867992884,"results":"82","hashOfConfig":"53"},{"size":3744,"mtime":1612870717395,"results":"83","hashOfConfig":"53"},{"size":5767,"mtime":1612870622477,"results":"84","hashOfConfig":"53"},{"size":5946,"mtime":1612870622476,"results":"85","hashOfConfig":"53"},{"size":5909,"mtime":1612870622475,"results":"86","hashOfConfig":"53"},{"size":2768,"mtime":1612869409963,"results":"87","hashOfConfig":"53"},{"size":449,"mtime":1612867992980,"results":"88","hashOfConfig":"53"},{"size":3445,"mtime":1612867992979,"results":"89","hashOfConfig":"53"},{"size":5589,"mtime":1612869611084,"results":"90","hashOfConfig":"53"},{"size":6309,"mtime":1612869611087,"results":"91","hashOfConfig":"53"},{"size":3463,"mtime":1612870717396,"results":"92","hashOfConfig":"53"},{"size":5898,"mtime":1612870625002,"results":"93","hashOfConfig":"53"},{"size":6055,"mtime":1612870622477,"results":"94","hashOfConfig":"53"},{"size":4544,"mtime":1612870622475,"results":"95","hashOfConfig":"53"},{"size":4916,"mtime":1612870622476,"results":"96","hashOfConfig":"53"},{"size":4781,"mtime":1612870622474,"results":"97","hashOfConfig":"53"},{"size":7294,"mtime":1612870622476,"results":"98","hashOfConfig":"53"},{"size":427,"mtime":1612867992951,"results":"99","hashOfConfig":"53"},{"size":10531,"mtime":1612869611084,"results":"100","hashOfConfig":"53"},{"size":12436,"mtime":1612869611084,"results":"101","hashOfConfig":"53"},{"size":462,"mtime":1612867992951,"results":"102","hashOfConfig":"53"},{"size":6371,"mtime":1612870622477,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"w7g81v",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"106"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"106"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"106"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"106"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"106"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"106"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"106"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"106"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"106"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"106"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"106"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"106"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"106"},"E:\\reactjs\\jobszone\\src\\index.js",[],["226","227"],"E:\\reactjs\\jobszone\\src\\App.js",[],"E:\\reactjs\\jobszone\\src\\reportWebVitals.js",[],"E:\\reactjs\\jobszone\\src\\components\\Search.js",[],"E:\\reactjs\\jobszone\\src\\screens\\CreateJobScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\InternshipDetailsScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\CreateInternshipScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\JobDetailsScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\ApplyJobScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\JobScreen.js",["228"],"import React, { useEffect, useState } from 'react';\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport JobCard from \"../components/JobCard\";\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport './screensStyle.css';\r\nimport Search from '../components/Search';\r\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\n\r\n\r\nfunction JobScreen() {\r\n  const isTablet = useMediaQuery({ query: '(max-width: 1100px)' })\r\n  const isMobile = useMediaQuery({\r\n    query: '(max-width: 600px)'\r\n  })\r\n  const [jobs,setJobs]=useState([]);\r\n  useEffect(()=>{\r\n    try{\r\n      const getJobList= async()=>{\r\n      const joblist=await API.graphql(\r\n        graphqlOperation(\r\n          listJobs,{\r\n            filter:{\r\n              jobType: {contains: \"job\"},\r\n              jobStatus:{eq:\"active\"}\r\n            }\r\n        }    \r\n      ))\r\n      setJobs(joblist.data.listJobs.items);\r\n      }\r\n    \r\n      getJobList();\r\n    }\r\n    catch{\r\n\r\n    }\r\n\r\n  },[]);\r\n  return (\r\n    <div >\r\n     <Header />\r\n     <div className=\"LargeSearchContainer\" style={{marginTop:100,marginLeft:400}} >\r\n     <Search />\r\n     </div>\r\n     <div className={ (isMobile) ? \"JobsSmall\" : ((isTablet) ? \"JobsMedium\" : \"JobsLarge\")} >\r\n     {\r\n       jobs.map(jobs => <JobCard \r\n        jobID={jobs.id}\r\n        companyName={jobs.companyName}\r\n        lastDate={jobs.lastDate}\r\n        role={jobs.jobName}\r\n        salary={jobs.salary}\r\n        experience={jobs.experience}\r\n        location={jobs.jobLocation}\r\n        />\r\n       )\r\n     }\r\n     </div>\r\n     <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobScreen;\r\n","E:\\reactjs\\jobszone\\src\\components\\Footer.js",[],"E:\\reactjs\\jobszone\\src\\components\\CreateJobForm.js",["229"],"import { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport React,{useEffect, useState} from 'react';\r\nimport { createJob,createJobCretaria,createJobDescription,createJobSkill,updateJobCount } from '../graphql/mutations';\r\nimport { getJobCount } from '../graphql/queries';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction CreateJobForm(props){\r\n\r\n  const [userId,setUserId]=useState('');\r\n  const [discriptionFields, setDiscriptionFields] = useState([{ value: '' }]);\r\n  const [skillsFields, setSkillsFields] = useState([{ value: '' }]);\r\n  const [criteriaFields, setCriteriaFields] = useState([{ value: '' }]);\r\n  const [jobDetails,updateJobDetils]=useState({\r\n    jobTitle:'',jobName:'',companyName:'',companyWebsite:'',aboutCompany:'',\r\n    experience:'',salary:'',jobLocation:'',lastDate:''\r\n  });\r\n  const[jobCount,setJobCount]=useState(1);\r\n  useEffect(()=>{\r\n    const fetchJobCount= async()=>{\r\n      const userInfo=await Auth.currentAuthenticatedUser({bypassCache:true});\r\n      setUserId(userInfo.attributes.sub);\r\n      const jobCountData = await API.graphql(\r\n        graphqlOperation(\r\n          getJobCount,{\r\n            id:'jobCount'\r\n          }\r\n        )\r\n      );\r\n     setJobCount(jobCountData.data.getJobCount.count+1);\r\n    }\r\n\r\n     fetchJobCount();\r\n\r\n  },[]);\r\n\r\n  function handleDiscriptionChange(i, event) {\r\n    const values = [...discriptionFields];\r\n    values[i].value = event.target.value;\r\n    setDiscriptionFields(values);\r\n  }\r\n\r\n  function handleDiscriptionAdd() {\r\n    const values = [...discriptionFields];\r\n    values.push({ value: null });\r\n    setDiscriptionFields(values);\r\n  }\r\n\r\n  function handleDiscriptionRemove(i) {\r\n    const values = [...discriptionFields];\r\n    values.splice(i, 1);\r\n    setDiscriptionFields(values);\r\n  }\r\n  function handleSkillsChange(i, event) {\r\n    const values = [...skillsFields];\r\n    values[i].value = event.target.value;\r\n    setSkillsFields(values);\r\n  }\r\n\r\n  function handleSkillsAdd() {\r\n    const values = [...skillsFields];\r\n    values.push({ value: null });\r\n    setSkillsFields(values);\r\n  }\r\n\r\n  function handleSkillsRemove(i) {\r\n    const values = [...skillsFields];\r\n    values.splice(i, 1);\r\n    setSkillsFields(values);\r\n  }\r\n  function handleCriteriaChange(i, event) {\r\n    const values = [...criteriaFields];\r\n    values[i].value = event.target.value;\r\n    setCriteriaFields(values);\r\n  }\r\n\r\n  function handleCriteriaAdd() {\r\n    const values = [...criteriaFields];\r\n    values.push({ value: null });\r\n    setCriteriaFields(values);\r\n  }\r\n\r\n  function handleCriteriaRemove(i) {\r\n    const values = [...criteriaFields];\r\n    values.splice(i, 1);\r\n    setCriteriaFields(values);\r\n  }\r\n  function handleChange(evt) {\r\n    const value = evt.target.value;\r\n    updateJobDetils({\r\n      ...jobDetails,\r\n      [evt.target.name]: value\r\n    });\r\n  }\r\n   const createNewJob=async()=>{\r\n    \r\n     await API.graphql(\r\n       graphqlOperation(\r\n         updateJobCount,{\r\n           input:{\r\n             id:'jobCount',\r\n             count:jobCount\r\n           }\r\n\r\n         }\r\n       )\r\n     );\r\n     await API.graphql(\r\n       graphqlOperation(\r\n         createJob,{\r\n           input:{\r\n            id:`job${jobCount}`,\r\n            jobName:jobDetails.jobName,\r\n            jobType:\"job\",\r\n            jobUserId:userId,\r\n            jobStatus:\"created\",\r\n            jobTitle:jobDetails.jobTitle,\r\n            companyName:jobDetails.companyName,\r\n            companyWebsite:jobDetails.companyWebsite,\r\n            aboutCompany:jobDetails.aboutCompany,\r\n            experience:jobDetails.experience,\r\n            salary:jobDetails.salary,\r\n            jobLocation:jobDetails.jobLocation,\r\n            lastDate:jobDetails.lastDate\r\n           }\r\n         }\r\n       )\r\n     );\r\n     let lDis =discriptionFields.length;\r\n     let iDis=0;\r\n     while(iDis<lDis){\r\n     await API.graphql(\r\n       graphqlOperation(\r\n         createJobDescription,{\r\n           input:{\r\n             content:discriptionFields[iDis].value,\r\n             jobID:`job${jobCount}`\r\n           }\r\n         }\r\n       )\r\n     );\r\n     iDis=iDis+1;\r\n        }\r\n        let lSkil=skillsFields.length;\r\n        let iSkill=0\r\n        while(iSkill<lSkil){\r\n     await API.graphql(\r\n      graphqlOperation(\r\n        createJobSkill,{\r\n          input:{\r\n            content:skillsFields[iSkill].value,\r\n            jobID:`job${jobCount}`\r\n          }\r\n        }\r\n      )\r\n    );\r\n    iSkill=iSkill+1;\r\n      }\r\n      let lCri=criteriaFields.length;\r\n      let iCri=0;\r\n      while(iCri<lCri){\r\n    await API.graphql(\r\n      graphqlOperation(\r\n        createJobCretaria,{\r\n          input:{\r\n            content:criteriaFields[iCri].value,\r\n            jobID:`job${jobCount}`\r\n          }\r\n        }\r\n      )\r\n    );\r\n    iCri=iCri+1\r\n      }\r\n      alert(\"Sucessfully created a job. Your Job will be active within 2 hrs, If not contact us.\");\r\n      props.history.push('/viewAllJobs');\r\n\r\n        }\r\n\r\n    return (\r\n\r\n\r\n    <div className=\"formContainer\">\r\n    <form >\r\n    <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n      <label htmlhtmlFor=\"job-title\">Job Title</label>\r\n      <input type=\"text\" value={jobDetails.jobTitle} onChange={handleChange} className=\"form-control\" name=\"jobTitle\" id=\"job-title\" placeholder=\"Enter Job Title\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"job-name\">Job Name</label>\r\n      <input type=\"text\" value={jobDetails.jobName} onChange={handleChange} className=\"form-control\" name=\"jobName\" id=\"job-name\" placeholder=\"Enter Job Name\" />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"company-name\">Company Name</label>\r\n      <input type=\"text\" value={jobDetails.companyName} onChange={handleChange} className=\"form-control\" name=\"companyName\" id=\"job-title\" placeholder=\"Enter Your Company Name\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"company-website\">Company Website</label>\r\n      <input type=\"text\" value={jobDetails.companyWebsite} onChange={handleChange} className=\"form-control\" name=\"companyWebsite\" id=\"job-website\" placeholder=\"Enter Company Official Website\" />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"about-company\">About Company</label>\r\n    <textarea className=\"form-control\" value={jobDetails.aboutCompany} onChange={handleChange} id=\"about-company\" name=\"aboutCompany\" rows=\"3\"></textarea>\r\n  </div>\r\n  <div className=\"form-row\">\r\n  <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"experience\">Experience Required</label>\r\n    <input type=\"text\" id=\"experience\" value={jobDetails.experience} onChange={handleChange}  name=\"experience\"className=\"form-control\" placeholder=\"Enter Experience Required For Job (eg:- 0-1years)\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n      <label htmlhtmlFor=\"salary\">Salary</label>\r\n      <input type=\"text\" value={jobDetails.salary} onChange={handleChange} className=\"form-control\" name=\"salary\" id=\"salary\" placeholder=\"Enter Salary Offered (eg:- 3 LPA )\" />\r\n    </div>   \r\n  </div>\r\n  <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"job-location\">Job Loaction</label>\r\n      <input type=\"text\" value={jobDetails.jobLocation} onChange={handleChange} className=\"form-control\" name=\"jobLocation\" id=\"job-location\" placeholder=\"Enter Job Location (for multiple enter Bengluru/Pune )\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"last-date\">Last Date To Apply</label>\r\n      <input type=\"date\" value={jobDetails.lastDate} onChange={handleChange} className=\"form-control\" name=\"lastDate\" id=\"lastDate\"  />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"job-description\">Job Description (add multiple lines) </label>\r\n    <button className=\"btn\" style={{marginLeft:30}} type=\"button\" onClick={() => handleDiscriptionAdd()}>\r\n       Add more field\r\n      </button>\r\n\r\n      {discriptionFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"jobDescription\"\r\n              placeholder=\"Describe Job\"\r\n              onChange={e => handleDiscriptionChange(idx, e)}\r\n            />\r\n            <button className=\"btn\" type=\"button\" onClick={() => handleDiscriptionRemove(idx)}>\r\n             Remove\r\n            </button>\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"desired-skills\">Desired Skills (add multiple lines) </label>\r\n    <button className=\"btn\" style={{marginLeft:30}} type=\"button\" onClick={() => handleSkillsAdd()}>\r\n       Add more field\r\n      </button>\r\n\r\n      {skillsFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"desiredSkills\"\r\n              placeholder=\"Add desired skills required for Job\"\r\n              onChange={e => handleSkillsChange(idx, e)}\r\n            />\r\n            <button className=\"btn\" type=\"button\" onClick={() => handleSkillsRemove(idx)}>\r\n             Remove\r\n            </button>\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"criteria\">Add Criteria (add multiple lines) </label>\r\n    <button className=\"btn\" style={{marginLeft:30}} type=\"button\" onClick={() => handleCriteriaAdd()}>\r\n       Add more field\r\n      </button>\r\n\r\n      {criteriaFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"criteria\"\r\n              placeholder=\"Enter criteria required for job\"\r\n              onChange={e => handleCriteriaChange(idx, e)}\r\n            />\r\n            <button className=\"btn\" type=\"button\" onClick={() => handleCriteriaRemove(idx)}>\r\n             Remove\r\n            </button>\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"text-center submitButton\">\r\n            <a onClick={createNewJob} style={{height:50,width:120,fontFamily:'sans-serif'}} name=\"addJob\" type=\"button\" className=\"btn btn-primary\">Add Job</a>\r\n          </div>\r\n</form>\r\n\r\n\r\n    </div>\r\n\r\n\r\n    );\r\n}\r\nexport default withRouter(CreateJobForm);","E:\\reactjs\\jobszone\\src\\components\\InternshipDetails.js",["230"],"import { API, graphqlOperation } from 'aws-amplify';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FiExternalLink } from 'react-icons/fi';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getJob } from '../graphql/queries';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nfunction InternshipDetails(){\r\n    let { jobId } = useParams();\r\n  const [jobDetails,setJobDetails]=useState([]);\r\n  const [jobDescription,setJobDescription]=useState([]);\r\n  const [desiredSkill,setDesiredSkill]=useState([]);\r\n  const [criteria,setCriteria]=useState([]);\r\n  const [perks,setPerks]=useState([]);\r\n  useEffect(()=>{\r\n    try{\r\n      const getJobDetails=async()=>{\r\n        const jobData=await API.graphql(\r\n          graphqlOperation(\r\n            getJob,{\r\n            id:jobId\r\n            }\r\n          )\r\n        );\r\n        \r\n      setJobDetails(jobData.data.getJob);\r\n      setJobDescription(jobData.data.getJob.jobDescription.items);\r\n      setDesiredSkill(jobData.data.getJob.jobSkills.items);\r\n      setCriteria(jobData.data.getJob.jobCretaria.items);\r\n      setPerks(jobData.data.getJob.perks.items);\r\n      \r\n\r\n      }\r\n\r\n      getJobDetails();\r\n\r\n    }catch(e){\r\n      console.log(e)\r\n    }\r\n\r\n  },[]);\r\n    return (\r\n        <div className=\"jobContainer\">\r\n            <h1>{jobDetails.jobTitle}</h1>\r\n            <h4>{jobDetails.jobName}</h4>\r\n            <p>{jobDetails.companyName} <a href={`${jobDetails.companyWebsite}`}><FiExternalLink size={18}/></a></p>\r\n            <ul className=\"jobTopList\" >\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Stipend</li>\r\n                        <li><b>{jobDetails.salary}</b></li>\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Duration</li>\r\n                        <li><b>{jobDetails.duration}</b></li>\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Job Location</li>\r\n                        <li><b>{jobDetails.jobLocation}</b></li>\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Apply By</li>\r\n                        <li><b>{moment(jobDetails.lastDate).format('ll')}</b></li>\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n            <h4 style={{marginTop:30}}>About Company<a href={`${jobDetails.comapanyWebsite}`}><FiExternalLink size={22}/></a></h4>\r\n            <p style={{marginTop:15}}>{jobDetails.aboutCompany}</p>\r\n            <h5>Job Description</h5>\r\n            <ul>\r\n                {jobDescription.map(jobDescription => <li>{jobDescription.content}</li>)}\r\n            </ul>\r\n            <h5>Desired Skills</h5>\r\n            <ul>\r\n            {desiredSkill.map(desiredSkill => <li>{desiredSkill.content}</li>)}\r\n            </ul>\r\n            <h5>Applying Critaria</h5>\r\n            <ul>\r\n            {criteria.map(criteria => <li>{criteria.content}</li>)}    \r\n            </ul>\r\n          <h5>Perks</h5>\r\n          <ul className=\"perks\">\r\n            {perks.map(perks => <li>{perks.content}</li>)}\r\n          </ul>\r\n          <h5>No of Position.</h5>\r\n          <p>{jobDetails.noOfPosition}</p>\r\n          <div className=\"text-center submitButton\">\r\n          <a href={`apply${jobId}`} style={{height:50,width:120,fontFamily:'sans-serif',fontSize:18,color:'white'}}  className=\"btn btn-primary\">Apply Now</a>\r\n          </div>\r\n              \r\n            \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default InternshipDetails;","E:\\reactjs\\jobszone\\src\\components\\JobCard.js",[],"E:\\reactjs\\jobszone\\src\\components\\CreateInternshipForm.js",[],"E:\\reactjs\\jobszone\\src\\components\\ApplyJobForm.js",[],"E:\\reactjs\\jobszone\\src\\components\\Header.js",[],"E:\\reactjs\\jobszone\\src\\components\\JobDetails.js",["231","232"],"\r\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FiExternalLink } from 'react-icons/fi';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getJob, listJobApplicants } from '../graphql/queries';\r\nimport moment from 'moment';\r\n\r\n\r\nfunction JobDetails(props){\r\n  let { jobId } = useParams();\r\n  const [isApplied,setIsApplied]=useState(false);\r\n  const [jobDetails,setJobDetails]=useState([]);\r\n  const [jobDescription,setJobDescription]=useState([]);\r\n  const [desiredSkill,setDesiredSkill]=useState([]);\r\n  const [criteria,setCriteria]=useState([]);\r\n  useEffect(()=>{\r\n    try{\r\n      const getJobDetails=async()=>{\r\n        const jobData=await API.graphql(\r\n          graphqlOperation(\r\n            getJob,{\r\n            id:jobId\r\n            }\r\n          )\r\n        );\r\n        const userInfo=await Auth.currentAuthenticatedUser({bypassCache:true});\r\n        const jobApplicants= await API.graphql(\r\n          graphqlOperation(\r\n            listJobApplicants,{\r\n              filter:{\r\n                userID: {contains: userInfo.attributes.sub},\r\n                jobID: {contains: jobId}\r\n              }\r\n            }\r\n          )\r\n        );\r\n        if(jobApplicants){\r\n          setIsApplied(true);\r\n        }\r\n        \r\n      setJobDetails(jobData.data.getJob);\r\n      setJobDescription(jobData.data.getJob.jobDescription.items);\r\n      setDesiredSkill(jobData.data.getJob.jobSkills.items);\r\n      setCriteria(jobData.data.getJob.jobCretaria.items);\r\n      \r\n\r\n      }\r\n\r\n      getJobDetails();\r\n\r\n    }catch(e){\r\n      console.log(e)\r\n    }\r\n\r\n  },[]);\r\n     return (\r\n        <div>\r\n        <div className=\"jobContainer\">\r\n            <h1>{jobDetails.jobTitle}</h1>\r\n            <h4>{jobDetails.jobName}</h4>\r\n            <p>{jobDetails.companyName} <a href={`${jobDetails.companyWebsite}`}><FiExternalLink size={18}/></a></p>\r\n            <ul className=\"jobTopList\" >\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Salary</li>\r\n                        <li><b>{jobDetails.salary}</b></li>\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Experience</li>\r\n                        <li><b>{jobDetails.experience}</b></li>\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Job Location</li>\r\n                        <li><b>{jobDetails.jobLocation}</b></li>\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    <ul>\r\n                        <li style={{color:'grey'}}>Apply By</li>\r\n                        <li><b>{moment(jobDetails.lastDate).format('ll')}</b></li>\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n            <h4 style={{marginTop:30}}>About Company<a href={`${jobDetails.companyWebsite}`}><FiExternalLink size={22}/></a></h4>\r\n            <p style={{marginTop:15}}>{jobDetails.aboutCompany}</p>\r\n            <h5>Job Description</h5>\r\n            <ul>\r\n                {jobDescription.map(jobDescription => <li>{jobDescription.content}</li>)}\r\n            </ul>\r\n            <h5>Desired Skills</h5>\r\n            <ul>\r\n            {desiredSkill.map(desiredSkill => <li>{desiredSkill.content}</li>)}\r\n            </ul>\r\n            <h5>Applying Critaria</h5>\r\n            <ul>\r\n            {criteria.map(criteria => <li>{criteria.content}</li>)}\r\n                \r\n            </ul>\r\n            <div className=\"text-center submitButton\">\r\n            <a href={`apply${jobId}`} style={{height:50,width:120,fontFamily:'sans-serif',fontSize:18,color:'white'}}  className=\"btn btn-primary\">Apply Now</a>\r\n          </div>\r\n        </div>\r\n    </div>   \r\n\r\n    );\r\n}\r\n\r\nexport default JobDetails;","E:\\reactjs\\jobszone\\src\\aws-exports.js",[],"E:\\reactjs\\jobszone\\src\\screens\\ProfileScreen.js",[],"E:\\reactjs\\jobszone\\src\\components\\ViewProfile.js",[],"E:\\reactjs\\jobszone\\src\\graphql\\queries.js",[],"E:\\reactjs\\jobszone\\src\\screens\\FirstRegisterScreen.js",[],"E:\\reactjs\\jobszone\\src\\components\\FirstRegister.js",[],"E:\\reactjs\\jobszone\\src\\graphql\\mutations.js",[],"E:\\reactjs\\jobszone\\src\\screens\\EditProfileScreen.js",[],"E:\\reactjs\\jobszone\\src\\components\\EditProfile.js",[],"E:\\reactjs\\jobszone\\src\\mutations.js",[],"E:\\reactjs\\jobszone\\src\\screens\\InternshipScreen.js",[],"E:\\reactjs\\jobszone\\src\\components\\InternshipCard.js",[],"E:\\reactjs\\jobszone\\src\\screens\\CompanyScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\ViewAllJobsScreen.js",["233"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\nimport {Link,withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { deleteJob, updateJob } from '../graphql/mutations';\r\n\r\nfunction ViewAllJobsScreen(props){\r\n\r\n  const [jobs,setJobs]=useState([]);\r\n  useEffect(()=>{\r\n      try{\r\n        const getJobList= async()=>{\r\n        const userInfo=await Auth.currentAuthenticatedUser({bypassCache:true});\r\n        const joblist=await API.graphql(\r\n          graphqlOperation(\r\n            listJobs,{\r\n                filter:{\r\n                  jobType: {contains: \"job\"},\r\n                  jobUserId: {contains: userInfo.attributes.sub}, \r\n                  jobStatus:{notContains:\"created\"}\r\n                }\r\n            }   \r\n        ));\r\n        setJobs(joblist.data.listJobs.items);\r\n        }\r\n      \r\n        getJobList();\r\n      }\r\n      catch(e){\r\n        console.log(e)\r\n  \r\n      }\r\n  \r\n    },[]);\r\n\r\n    async function deleteThisJob (jobId){\r\n      await API.graphql(\r\n        graphqlOperation(\r\n          deleteJob,{\r\n            input:{\r\n              id:jobId\r\n            }\r\n          }\r\n        )\r\n      );\r\n      alert(\"Job Deleted Sucessfully\");\r\n      window.location.reload();\r\n    }; \r\n    const changeJobStatus=async(jobId,currentStatus)=>{\r\n\r\n      if(currentStatus===\"active\"){\r\n        await API.graphql(\r\n          graphqlOperation(\r\n            updateJob,\r\n            {\r\n              input:{\r\n                id:jobId,\r\n                jobStatus:\"inactive\"\r\n              }\r\n            }\r\n          )\r\n        );\r\n\r\n      }else{\r\n        await API.graphql(\r\n          graphqlOperation(\r\n            updateJob,\r\n            {\r\n              input:{\r\n                id:jobId,\r\n                jobStatus:\"active\"\r\n              }\r\n            }\r\n          )\r\n        );\r\n\r\n      }\r\n      window.location.reload();\r\n\r\n    } \r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n          <ul className=\"menu\">\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"company\">Dashboard</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"viewJobs\">View jobs</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"viewAllInternships\">View internships</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <main className=\"admin__main\">\r\n        <h2 style={{color:'rebeccapurple'}}>All Jobs </h2>\r\n          <p style={{color:'rebeccapurple'}}>Posted By You</p>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Job Name</th>\r\n                        <th>Location</th>\r\n                        <th>Post Date</th>\r\n                        <th>Last Date</th>\r\n                        <th>Status</th>\r\n                        <th>View Applicants</th>\r\n                        <th>View</th>\r\n                        <th>Edit</th>\r\n                        <th>Delete</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobs.map(jobs=>\r\n                                <tr>\r\n                                    <td>{jobs.jobName}</td>\r\n                                    <td>{jobs.jobLocation}</td>\r\n                                    <td>{moment(jobs.createdAt).format('ll')}</td>\r\n                                    <td>{moment(jobs.lastDate).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{changeJobStatus(jobs.id,jobs.jobStatus)}}  style={{color:'black'}} >{jobs.jobStatus}</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/viewJobApplicants${jobs.id}`\r\n                                            }}>View</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/job${jobs.id}`\r\n                                            }}>View</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editJob${jobs.id}`\r\n                                            }}>Edit</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisJob(jobs.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewAllJobsScreen);","E:\\reactjs\\jobszone\\src\\screens\\ViewAllInternshipsScreen.js",["234"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\nimport {Link} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { deleteJob, updateJob } from '../graphql/mutations';\r\n\r\nfunction ViewAllInternshipsScreen(){\r\n    const [jobs,setJobs]=useState([]);\r\n    useEffect(()=>{\r\n        try{\r\n          const getJobList= async()=>{\r\n            const userInfo=await Auth.currentAuthenticatedUser({bypassCache:true});\r\n            const joblist=await API.graphql(\r\n              graphqlOperation(\r\n                listJobs,{\r\n                    filter:{\r\n                      jobType: {contains: \"internship\"},\r\n                      jobUserId: {contains: userInfo.attributes.sub},\r\n                      jobStatus:{notContains:\"created\"}\r\n                    }\r\n                }   \r\n            ));\r\n          setJobs(joblist.data.listJobs.items);\r\n          }\r\n        \r\n          getJobList();\r\n        }\r\n        catch(e){\r\n          console.log(e)\r\n    \r\n        }\r\n    \r\n      },[]);\r\n      async function deleteThisJob (jobId){\r\n        await API.graphql(\r\n          graphqlOperation(\r\n            deleteJob,{\r\n              input:{\r\n                id:jobId\r\n              }\r\n            }\r\n          )\r\n        );\r\n        alert(\"Job Deleted Sucessfully\");\r\n        window.location.reload();\r\n      };\r\n      const changeJobStatus=async(jobId,currentStatus)=>{\r\n\r\n        if(currentStatus===\"active\"){\r\n          await API.graphql(\r\n            graphqlOperation(\r\n              updateJob,\r\n              {\r\n                input:{\r\n                  id:jobId,\r\n                  jobStatus:\"inactive\"\r\n                }\r\n              }\r\n            )\r\n          );\r\n  \r\n        }else{\r\n          await API.graphql(\r\n            graphqlOperation(\r\n              updateJob,\r\n              {\r\n                input:{\r\n                  id:jobId,\r\n                  jobStatus:\"active\"\r\n                }\r\n              }\r\n            )\r\n          );\r\n  \r\n        }\r\n        window.location.reload();\r\n  \r\n      } \r\n  \r\n  \r\n  \r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n          <ul className=\"menu\">\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"company\">Dashboard</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"viewJobs\">View jobs</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"viewAllInternships\">View internships</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <main className=\"admin__main\">\r\n          <h2 style={{color:'rebeccapurple'}}>All Internships </h2>\r\n          <p style={{color:'rebeccapurple'}}>Posted By You</p>\r\n          <div className=\"dashboard\">\r\n            <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Internship Name</th>\r\n                        <th>Location</th>\r\n                        <th>Post Date</th>\r\n                        <th>Last Date</th>\r\n                        <th>Status</th>\r\n                        <th>View Applicants</th>\r\n                        <th>View </th>\r\n                        <th>Edit </th>\r\n                        <th>Delete </th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobs.map(jobs=>\r\n                                <tr>\r\n                                    <td>{jobs.jobName}</td>\r\n                                    <td>{jobs.jobLocation}</td>\r\n                                    <td>{moment(jobs.createdAt).format('ll')}</td>\r\n                                    <td>{moment(jobs.lastDate).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{changeJobStatus(jobs.id,jobs.jobStatus)}}  style={{color:'black'}} >{jobs.jobStatus}</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/viewJobApplicants${jobs.id}`\r\n                                            }}>View</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/internship${jobs.id}`\r\n                                            }}>View</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editInternship${jobs.id}`\r\n                                            }}>Edit</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisJob(jobs.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ViewAllInternshipsScreen;","E:\\reactjs\\jobszone\\src\\screens\\ViewJobApplicantsScreen.js",["235","236"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, graphqlOperation, Storage } from 'aws-amplify';\r\nimport {listJobApplicants} from '../graphql/queries';\r\n\r\nimport {Link, useParams, withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { updateJobApplicant } from '../graphql/mutations';\r\n\r\nfunction ViewJobApplicantsScreen(props){\r\n  const {jobId} =useParams();\r\n  const [jobApplicants,setJobApplicants]=useState([]);\r\n  useEffect(()=>{\r\n      try{\r\n        const getJobApplicant=async()=>{\r\n        const AllApplicants=await API.graphql(\r\n          graphqlOperation(\r\n            listJobApplicants,{\r\n              filter:{\r\n                jobID: {contains: jobId}\r\n              }\r\n            }\r\n          )\r\n        )\r\n        setJobApplicants(AllApplicants.data.listJobApplicants.items)\r\n       \r\n        }\r\n      \r\n        getJobApplicant();\r\n      }\r\n      catch(e){\r\n        console.log(e)\r\n  \r\n      }\r\n  \r\n    },[]);\r\n    const getResumeUrl=async(resumeFile)=>{\r\n      const resumeUrl=await Storage.get(resumeFile);\r\n      console.log(resumeUrl);\r\n      window.open(resumeUrl, '_blank', 'noopener,noreferrer')\r\n      \r\n    }\r\n    const changeStatus=async(appliactionId,status)=>{\r\n        if(status===\"Applied\"){\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    updateJobApplicant,\r\n                    {\r\n                      input:{\r\n                          id:appliactionId,\r\n                          applicationStatus:\"In-Touch\"\r\n                      }\r\n                  }\r\n                )\r\n            )\r\n        }\r\n        if(status===\"In-Touch\"){\r\n          await API.graphql(\r\n              graphqlOperation(\r\n                  updateJobApplicant,\r\n                  {\r\n                    input:{\r\n                        id:appliactionId,\r\n                        applicationStatus:\"Selected\"\r\n                    }\r\n                }\r\n              )\r\n          )\r\n      }\r\n      if(status===\"Selected\"){\r\n          await API.graphql(\r\n              graphqlOperation(\r\n                  updateJobApplicant,\r\n                  {\r\n                    input:{\r\n                        id:appliactionId,\r\n                        applicationStatus:\"Rejected\"\r\n                    }\r\n                }\r\n              )\r\n          )\r\n      }\r\n      if(status===\"Rejected\"){\r\n          await API.graphql(\r\n              graphqlOperation(\r\n                  updateJobApplicant,\r\n                  {\r\n                    input:{\r\n                        id:appliactionId,\r\n                        applicationStatus:\"Applied\"\r\n                    }\r\n                }\r\n              )\r\n          )\r\n      }\r\n      window.location.reload();\r\n\r\n    }\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n          <ul className=\"menu\">\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"company\">Dashboard</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"viewJobs\">View jobs</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"viewAllInternships\">View internships</a>\r\n            </li>\r\n            <li className=\"menu__item\">\r\n              <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <main className=\"admin__main\">\r\n\r\n          <h2 style={{color:'rebeccapurple'}}>All Applicants </h2>\r\n          <p style={{color:'rebeccapurple'}}>For job/internship</p>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Name</th>\r\n                        <th>College</th>\r\n                        <th>Email</th>\r\n                        <th>Mobile No.</th>\r\n                        <th>Applied Date</th>\r\n                        <th>Status</th>\r\n                        <th>View Resume</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobApplicants.map(jobApplicants=>\r\n                     \r\n                                <tr>\r\n                                    <td>{jobApplicants.user.firstName} {jobApplicants.user.lastName}</td>\r\n                                    <td>{jobApplicants.user.collegeName}</td>\r\n                                    <td>{jobApplicants.user.email}</td>\r\n                                    <td>{jobApplicants.user.mobileNo}</td>\r\n                                    <td>{moment(jobApplicants.createdAt).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{changeStatus(jobApplicants.id,jobApplicants.applicationStatus)}} style={{color:'black'}}>{jobApplicants.applicationStatus}</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{getResumeUrl(jobApplicants.user.resumeFile)}} style={{color:'black'}}>View</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewJobApplicantsScreen);","E:\\reactjs\\jobszone\\src\\components\\MyAppications.js",[],"E:\\reactjs\\jobszone\\src\\screens\\MyAppicationsScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\JobSearchScreen.js",["237"],"import React, { useEffect, useState } from 'react';\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport JobCard from \"../components/JobCard\";\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport './screensStyle.css';\r\nimport Search from '../components/Search';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction JobSearchScreen() {\r\n  let {searchTerm}=useParams();\r\n  console.log(searchTerm);\r\n  const isTablet = useMediaQuery({ query: '(max-width: 1100px)' })\r\n  const isMobile = useMediaQuery({\r\n    query: '(max-width: 600px)'\r\n  })\r\n  const [jobsByJobName,setJobsByJobName]=useState([]);\r\n  const [jobsByLocation,setJobsByLocation]=useState([]);\r\n  const [jobsByCompanyName,setJobsByCompanyName]=useState([]);\r\n  useEffect(()=>{\r\n    try{\r\n      const getJobList= async()=>{\r\n      const joblistByJobName=await API.graphql(\r\n        graphqlOperation(\r\n          listJobs,{\r\n            filter:{\r\n                jobName: {contains: searchTerm}\r\n              } \r\n            }\r\n      ));\r\n      const joblistByCompanyName=await API.graphql(\r\n        graphqlOperation(\r\n          listJobs,{\r\n            filter:{\r\n                companyName: {contains: searchTerm}\r\n              } \r\n            }\r\n      ));\r\n      const joblistByLocation=await API.graphql(\r\n        graphqlOperation(\r\n          listJobs,{\r\n            filter:{\r\n                jobLocation: {contains: searchTerm}\r\n              } \r\n            }\r\n      ));\r\n      setJobsByJobName(joblistByJobName.data.listJobs.items);\r\n      setJobsByCompanyName(joblistByCompanyName.data.listJobs.items);\r\n      setJobsByLocation(joblistByLocation.data.listJobs.items);\r\n      }\r\n    \r\n      getJobList();\r\n    }\r\n    catch{\r\n\r\n    }\r\n\r\n  },[]);\r\n  return (\r\n    <div >\r\n     <Header />\r\n     <div className=\"LargeSearchContainer\" style={{marginTop:100,marginLeft:400}} >\r\n     <Search \r\n     searchValue={searchTerm}\r\n     />\r\n     </div>\r\n     <div className={ (isMobile) ? \"JobsSmall\" : ((isTablet) ? \"JobsMedium\" : \"JobsLarge\")} >\r\n     {\r\n       jobsByJobName.map(jobsByJobName => <JobCard \r\n        jobID={jobsByJobName.id}\r\n        companyName={jobsByJobName.companyName}\r\n        lastDate={jobsByJobName.lastDate}\r\n        role={jobsByJobName.jobName}\r\n        salary={jobsByJobName.salary}\r\n        experience={jobsByJobName.experience}\r\n        location={jobsByJobName.jobLocation}\r\n        />\r\n       )\r\n     }\r\n     {\r\n       jobsByCompanyName.map(jobsByCompanyName => <JobCard \r\n        jobID={jobsByCompanyName.id}\r\n        companyName={jobsByCompanyName.companyName}\r\n        lastDate={jobsByCompanyName.lastDate}\r\n        role={jobsByCompanyName.jobName}\r\n        salary={jobsByCompanyName.salary}\r\n        experience={jobsByCompanyName.experience}\r\n        location={jobsByLocation.jobLocation}\r\n        />\r\n       )\r\n     }\r\n     {\r\n       jobsByLocation.map(jobsByLocation => <JobCard \r\n        jobID={jobsByLocation.id}\r\n        companyName={jobsByLocation.companyName}\r\n        lastDate={jobsByLocation.lastDate}\r\n        role={jobsByLocation.jobName}\r\n        salary={jobsByLocation.salary}\r\n        experience={jobsByLocation.experience}\r\n        location={jobsByLocation.jobLocation}\r\n        />\r\n       )\r\n     }\r\n     </div>\r\n     <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobSearchScreen;\r\n","E:\\reactjs\\jobszone\\src\\components\\CompanyRegister.js",[],"E:\\reactjs\\jobszone\\src\\components\\EditCompanyProfile.js",[],["238","239"],"E:\\reactjs\\jobszone\\src\\screens\\AdminScreen.js",["240"],"import React, { useState,useEffect } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\n\r\nfunction AdminScreen(){\r\n  const [jobs,setJobs]=useState([]);\r\n  const [internships,setInternships]=useState([]);\r\n  useEffect(()=>{\r\n    try{\r\n      const getJobList= async()=>{\r\n      const jobList=await API.graphql(\r\n        graphqlOperation(\r\n          listJobs,{\r\n              filter:{\r\n                jobType: {contains: \"job\"}\r\n              }\r\n          }   \r\n      ));\r\n      const internshipList=await API.graphql(\r\n        graphqlOperation(\r\n          listJobs,{\r\n              filter:{\r\n                jobType: {contains: \"internship\"}\r\n              }\r\n          }   \r\n      ));\r\n      setJobs(jobList.data.listJobs.items);\r\n      setInternships(internshipList.data.listJobs.items);\r\n      }\r\n    \r\n      getJobList();\r\n    }\r\n    catch(e){\r\n      console.log(e)\r\n\r\n    }\r\n\r\n  },[]);\r\n    return (\r\n        <div className=\"admin\">\r\n  <header className=\"admin__header\">\r\n    <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n    <div className=\"toolbar\">\r\n      <h3 style={{color:'white'}}>.</h3>\r\n      <a href=\"#\" className=\"logout\">\r\n        Log Out\r\n      </a>\r\n    </div>\r\n  </header>\r\n  <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"approveJobs\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllUsers\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllCompanies\">View All Companies</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n  <main className=\"admin__main\">\r\n    <h2 style={{color:'rebeccapurple'}}>Dashboard</h2>\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard__item\">\r\n        <div className=\"admincard\">\r\n          <h4>Total Jobs:</h4>\r\n        <h1 style={{fontSize:76,color:'rebeccapurple'}}>{jobs.length} Jobs</h1>\r\n        <a href=\"adminJobs\">\r\n                <div className=\"panel-footer\">\r\n                    <span className=\"pull-left\">View All Jobs</span>\r\n                </div>\r\n            </a>\r\n        </div>\r\n      </div>\r\n      <div className=\"dashboard__item\">\r\n        <div className=\"admincard\">\r\n          <h4>Total Internships:</h4>\r\n        <h1 style={{fontSize:76,color:'rebeccapurple'}}>{internships.length} Internships</h1>\r\n        <a href=\"adminInternship\">\r\n                <div className=\"panel-footer\">\r\n                    <span className=\"pull-left\">View All Internship</span>\r\n                </div>\r\n            </a>\r\n        </div>\r\n      </div>\r\n   \r\n    </div>\r\n   \r\n  </main>\r\n  <footer className=\"admin__footer\">\r\n    <span>\r\n      &copy; 2021 JobsZone.\r\n    </span>\r\n  </footer>\r\n</div>\r\n   );\r\n}\r\n\r\nexport default AdminScreen;","E:\\reactjs\\jobszone\\src\\screens\\ViewAdminJobsScreen.js",["241","242"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\nimport {Link,withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { deleteJob, updateJob } from '../graphql/mutations';\r\n\r\nfunction ViewAdminJobsScreen(props){\r\n\r\n  const [jobs,setJobs]=useState([]);\r\n  useEffect(()=>{\r\n      try{\r\n        const getJobList= async()=>{\r\n        const joblist=await API.graphql(\r\n          graphqlOperation(\r\n            listJobs,{\r\n                filter:{\r\n                  jobType: {contains: \"job\"},\r\n                  jobStatus:{notContains:\"created\"}\r\n                }\r\n            }   \r\n        ));\r\n        setJobs(joblist.data.listJobs.items);\r\n        }\r\n      \r\n        getJobList();\r\n      }\r\n      catch(e){\r\n        console.log(e)\r\n  \r\n      }\r\n  \r\n    },[]);\r\n\r\n    async function deleteThisJob (jobId){\r\n      await API.graphql(\r\n        graphqlOperation(\r\n          deleteJob,{\r\n            input:{\r\n              id:jobId\r\n            }\r\n          }\r\n        )\r\n      );\r\n      alert(\"Job Deleted Sucessfully\");\r\n      window.location.reload();\r\n    }; \r\n    const changeJobStatus=async(jobId,currentStatus)=>{\r\n\r\n      if(currentStatus===\"active\"){\r\n        await API.graphql(\r\n          graphqlOperation(\r\n            updateJob,\r\n            {\r\n              input:{\r\n                id:jobId,\r\n                jobStatus:\"inactive\"\r\n              }\r\n            }\r\n          )\r\n        );\r\n\r\n      }else{\r\n        await API.graphql(\r\n          graphqlOperation(\r\n            updateJob,\r\n            {\r\n              input:{\r\n                id:jobId,\r\n                jobStatus:\"active\"\r\n              }\r\n            }\r\n          )\r\n        );\r\n\r\n      }\r\n      window.location.reload();\r\n\r\n    } \r\n\r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"approveJobs\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllUsers\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllCompanies\">View All Companies</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n        <main className=\"admin__main\">\r\n        <h2 style={{color:'rebeccapurple'}}>All Jobs </h2>\r\n          <p style={{color:'rebeccapurple'}}>Posted By Companies</p>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Job Name</th>\r\n                        <th>Company Name</th>\r\n                        <th>Location</th>\r\n                        <th>Post Date</th>\r\n                        <th>Last Date</th>\r\n                        <th>Status</th>\r\n                        <th>View Applicants</th>\r\n                        <th>Edit Details</th>\r\n                        <th>Delete</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobs.map(jobs=>\r\n                                <tr>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/job${jobs.id}`\r\n                                            }}>{jobs.jobName}</Link></td>\r\n                                    <td>{jobs.companyName}</td>        \r\n                                    <td>{jobs.jobLocation}</td>\r\n                                    <td>{moment(jobs.createdAt).format('ll')}</td>\r\n                                    <td>{moment(jobs.lastDate).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{changeJobStatus(jobs.id,jobs.jobStatus)}}  style={{color:'black'}} >{jobs.jobStatus}</Link>\r\n                                    </td>\r\n\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/viewAllJobApplicants${jobs.id}`\r\n                                            }}>View</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editJob${jobs.id}`\r\n                                            }}>Edit</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisJob(jobs.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewAdminJobsScreen);","E:\\reactjs\\jobszone\\src\\screens\\ViewAdminInternshipsScreen.js",["243"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\nimport {Link} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { deleteJob, updateJob } from '../graphql/mutations';\r\n\r\nfunction ViewAdminInternshipsScreen(){\r\n    const [jobs,setJobs]=useState([]);\r\n    useEffect(()=>{\r\n        try{\r\n          const getJobList= async()=>{\r\n            const joblist=await API.graphql(\r\n              graphqlOperation(\r\n                listJobs,{\r\n                    filter:{\r\n                      jobType: {contains: \"internship\"},\r\n                      jobStatus:{notContains:\"created\"}\r\n                    }\r\n                }   \r\n            ));\r\n          setJobs(joblist.data.listJobs.items);\r\n          }\r\n        \r\n          getJobList();\r\n        }\r\n        catch(e){\r\n          console.log(e)\r\n    \r\n        }\r\n    \r\n      },[]);\r\n      async function deleteThisJob (jobId){\r\n        await API.graphql(\r\n          graphqlOperation(\r\n            deleteJob,{\r\n              input:{\r\n                id:jobId\r\n              }\r\n            }\r\n          )\r\n        );\r\n        alert(\"Job Deleted Sucessfully\");\r\n        window.location.reload();\r\n      };\r\n      const changeJobStatus=async(jobId,currentStatus)=>{\r\n\r\n        if(currentStatus===\"active\"){\r\n          await API.graphql(\r\n            graphqlOperation(\r\n              updateJob,\r\n              {\r\n                input:{\r\n                  id:jobId,\r\n                  jobStatus:\"inactive\"\r\n                }\r\n              }\r\n            )\r\n          );\r\n\r\n        }else{\r\n          await API.graphql(\r\n            graphqlOperation(\r\n              updateJob,\r\n              {\r\n                input:{\r\n                  id:jobId,\r\n                  jobStatus:\"active\"\r\n                }\r\n              }\r\n            )\r\n          );\r\n\r\n        }\r\n        window.location.reload();\r\n\r\n      } \r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"approveJobs\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllUsers\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllCompanies\">View All Companies</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n        <main className=\"admin__main\">\r\n          <h2 style={{color:'rebeccapurple'}}>All Internships </h2>\r\n          <p style={{color:'rebeccapurple'}}>Posted By Companies</p>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Internship Name</th>\r\n                        <th>Company Name</th>\r\n                        <th>Location</th>\r\n                        <th>Post Date</th>\r\n                        <th>Last Date</th>\r\n                        <th>Status</th>\r\n                        <th>View Applicants</th>\r\n                        <th>Edit Details</th>\r\n                        <th>Delete</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobs.map(jobs=>\r\n                                <tr>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/internship${jobs.id}`\r\n                                            }}>{jobs.jobName}</Link></td>\r\n                                    <td>{jobs.companyName}</td>        \r\n                                    <td>{jobs.jobLocation}</td>\r\n                                    <td>{moment(jobs.createdAt).format('ll')}</td>\r\n                                    <td>{moment(jobs.lastDate).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{changeJobStatus(jobs.id,jobs.jobStatus)}}  style={{color:'black'}} >{jobs.jobStatus}</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/viewAllJobApplicants${jobs.id}`\r\n                                            }}>View</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editInternship${jobs.id}`\r\n                                            }}>Edit</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisJob(jobs.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone.\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ViewAdminInternshipsScreen;","E:\\reactjs\\jobszone\\src\\screens\\ViewAdminJobApplicantScreen.js",["244"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, graphqlOperation, Storage } from 'aws-amplify';\r\nimport {listJobApplicants} from '../graphql/queries';\r\n\r\nimport {Link, useParams, withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nfunction ViewAdminJobApplicantsScreen(props){\r\n    const {jobId} =useParams();\r\n    const [jobApplicants,setJobApplicants]=useState([]);\r\n    useEffect(()=>{\r\n        try{\r\n          const getJobApplicant=async()=>{\r\n          const AllApplicants=await API.graphql(\r\n            graphqlOperation(\r\n              listJobApplicants\r\n            )\r\n          )\r\n          setJobApplicants(AllApplicants.data.listJobApplicants.items)\r\n         \r\n          }\r\n        \r\n          getJobApplicant();\r\n        }\r\n        catch(e){\r\n          console.log(e)\r\n    \r\n        }\r\n    \r\n      },[]);\r\n      const getResumeUrl=async(resumeFile)=>{\r\n        const resumeUrl=await Storage.get(resumeFile);\r\n        console.log(resumeUrl);\r\n        window.open(resumeUrl, '_blank', 'noopener,noreferrer')\r\n        \r\n      }\r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          \r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"approveJobs\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllUsers\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllCompanies\">View All Companies</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n        <main className=\"admin__main\">\r\n\r\n          <h2 style={{color:'rebeccapurple'}}>All Applicants </h2>\r\n          <p style={{color:'rebeccapurple'}}>For job/internship</p>\r\n          <div className=\"dashboard\">\r\n            <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Job Name</th>\r\n                        <th>Applicant Name</th>\r\n                        <th>College</th>\r\n                        <th>Email</th>\r\n                        <th>Mobile No.</th>\r\n                        <th>Applied Date</th>\r\n                        <th>View Resume</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobApplicants.map(jobApplicants=>\r\n                     \r\n                                <tr>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/job${jobApplicants.job.id}`\r\n                                            }}>{jobApplicants.job.jobName}</Link></td>\r\n                                    <td>{jobApplicants.user.firstName} {jobApplicants.user.lastName}</td>\r\n                                    <td>{jobApplicants.user.collegeName}</td>\r\n                                    <td>{jobApplicants.user.email}</td>\r\n                                    <td>{jobApplicants.user.mobileNo}</td>\r\n                                    <td>{moment(jobApplicants.createdAt).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{getResumeUrl(jobApplicants.user.resumeFile)}} style={{color:'black'}}>View</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewAdminJobApplicantsScreen);","E:\\reactjs\\jobszone\\src\\screens\\ViewJobRequestsScreen.js",["245"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs} from '../graphql/queries';\r\nimport {Link,withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { deleteJob, updateJob } from '../graphql/mutations';\r\n\r\nfunction ViewJobRequestsScreen(){\r\n\r\n  const [jobs,setJobs]=useState([]);\r\n  useEffect(()=>{\r\n      try{\r\n        const getJobList= async()=>{\r\n        const joblist=await API.graphql(\r\n          graphqlOperation(\r\n            listJobs,{\r\n                filter:{\r\n                  jobStatus:{contains:\"created\"}\r\n                }\r\n            }   \r\n        ));\r\n        setJobs(joblist.data.listJobs.items);\r\n        }\r\n      \r\n        getJobList();\r\n      }\r\n      catch(e){\r\n        console.log(e)\r\n  \r\n      }\r\n  \r\n    },[]);\r\n\r\n    async function deleteThisJob (jobId){\r\n      await API.graphql(\r\n        graphqlOperation(\r\n          deleteJob,{\r\n            input:{\r\n              id:jobId\r\n            }\r\n          }\r\n        )\r\n      );\r\n      alert(\"Job Deleted Sucessfully\");\r\n      window.location.reload();\r\n    }; \r\n    const changeJobStatus=async(jobId)=>{\r\n        await API.graphql(\r\n          graphqlOperation(\r\n            updateJob,\r\n            {\r\n              input:{\r\n                id:jobId,\r\n                jobStatus:\"active\"\r\n              }\r\n            }\r\n          )\r\n        );\r\n      window.location.reload();\r\n    } \r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminApplicants\">View All Applicants</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n        <main className=\"admin__main\">\r\n        <h2 style={{color:'rebeccapurple'}}>All Job Requests </h2>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Job Name</th>\r\n                        <th>Job Type</th>\r\n                        <th>Company Name</th>\r\n                        <th>Job Location</th>\r\n                        <th>Post Date</th>\r\n                        <th>Last Date</th>\r\n                        <th>Approve</th>\r\n                        <th>Delete </th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobs.map(jobs=>\r\n                                <tr>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editJob${jobs.id}`\r\n                                            }}>{jobs.jobName}</Link></td>\r\n                                    <td>{jobs.jobType}</td> \r\n                                    <td>{jobs.companyName}</td>        \r\n                                    <td>{jobs.jobLocation}</td>\r\n                                    <td>{moment(jobs.createdAt).format('ll')}</td>\r\n                                    <td>{moment(jobs.lastDate).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{changeJobStatus(jobs.id)}}   style={{color:'black'}}>Approve</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisJob(jobs.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewJobRequestsScreen);","E:\\reactjs\\jobszone\\src\\screens\\ViewAllUsersScreen.js",["246","247","248","249"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs, listUsers} from '../graphql/queries';\r\nimport {Link,withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { deleteJob, deleteUser } from '../graphql/mutations';\r\n\r\nfunction ViewAllUsersScreen(props){\r\n\r\n  const [users,setUsers]=useState([]);\r\n  useEffect(()=>{\r\n      try{\r\n        const getUserList= async()=>{\r\n        const userlist=await API.graphql(\r\n          graphqlOperation(\r\n            listUsers,{\r\n                filter:{\r\n                  userRole: {contains: \"JobSeeker\"},\r\n                }\r\n            }   \r\n        ));\r\n        setUsers(userlist.data.listUsers.items);\r\n        }\r\n      \r\n        getUserList();\r\n      }\r\n      catch(e){\r\n        console.log(e)\r\n  \r\n      }\r\n  \r\n    },[]);\r\n\r\n    async function deleteThisUser (userId){\r\n      await API.graphql(\r\n        graphqlOperation(\r\n          deleteUser,{\r\n            input:{\r\n              id:userId\r\n            }\r\n          }\r\n        )\r\n      );\r\n      alert(\"User Deleted Sucessfully\");\r\n      window.location.reload();\r\n    }; \r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"approveJobs\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllUsers\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllCompanies\">View All Companies</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n        <main className=\"admin__main\">\r\n        <h2 style={{color:'rebeccapurple'}}>All Jobs </h2>\r\n          <p style={{color:'rebeccapurple'}}>Posted By Companies</p>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Name</th>\r\n                        <th>Mobile No</th>\r\n                        <th>Email</th>\r\n                        <th>Address</th>\r\n                        <th>College Name</th>\r\n                        <th>Passing Year</th>\r\n                        <th>Edit Details</th>\r\n                        <th>Delete</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {users.map(users=>\r\n                                <tr>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/job${users.id}`\r\n                                            }}>{users.firstName} {users.lastName}</Link></td>\r\n                                    <td>{users.mobileNo}</td>        \r\n                                    <td>{users.email}</td>\r\n                                    <td>{users.address}</td>\r\n                                    <td>{users.collegeName}</td>\r\n                                    <td>{moment(users.courseCompletion).format('yyyy')}</td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editJob${users.id}`\r\n                                            }}>Edit</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisUser(users.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewAllUsersScreen);","E:\\reactjs\\jobszone\\src\\screens\\ViewAllCompaniesScreen.js",["250","251","252","253","254"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport {listJobs, listUsers} from '../graphql/queries';\r\nimport {Link,withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { deleteJob, deleteUser, updateUser } from '../graphql/mutations';\r\n\r\nfunction ViewAllCompaniesScreen(props){\r\n\r\n  const [users,setUsers]=useState([]);\r\n  const [admins,setAdmins]=useState([]);\r\n  useEffect(()=>{\r\n      try{\r\n        const getUserList= async()=>{\r\n        const userlist=await API.graphql(\r\n          graphqlOperation(\r\n            listUsers,{\r\n                filter:{\r\n                  userRole: {contains: \"JobProvider\"},\r\n                }\r\n            }   \r\n        ));\r\n        const adminlist=await API.graphql(\r\n            graphqlOperation(\r\n              listUsers,{\r\n                  filter:{\r\n                    userRole: {contains: \"Admin\"},\r\n                  }\r\n              }   \r\n          ));\r\n        setUsers(userlist.data.listUsers.items);\r\n        setAdmins(adminlist.data.listUsers.items)\r\n        }\r\n      \r\n        getUserList();\r\n      }\r\n      catch(e){\r\n        console.log(e)\r\n  \r\n      }\r\n  \r\n    },[]);\r\n\r\n    async function deleteThisUser (userId){\r\n      await API.graphql(\r\n        graphqlOperation(\r\n          deleteUser,{\r\n            input:{\r\n              id:userId\r\n            }\r\n          }\r\n        )\r\n      );\r\n      alert(\"User Deleted Sucessfully\");\r\n      window.location.reload();\r\n    };\r\n    const changeUserRole=async(userId,userRole)=>{\r\n      if(userRole===\"JobProvider\"){\r\n      await API.graphql(\r\n        graphqlOperation(\r\n          updateUser,{\r\n            input:{\r\n              id:userId,\r\n              userRole:\"Admin\"\r\n            }\r\n          }\r\n        )\r\n      );\r\n        }\r\n        if(userRole===\"Admin\"){\r\n          await API.graphql(\r\n            graphqlOperation(\r\n              updateUser,{\r\n                input:{\r\n                  id:userId,\r\n                  userRole:\"JobProvider\"\r\n                }\r\n              }\r\n            )\r\n          );\r\n            }\r\n            window.location.reload();\r\n    } \r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"approveJobs\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllUsers\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllCompanies\">View All Companies</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n        <main className=\"admin__main\">\r\n        <h2 style={{color:'rebeccapurple'}}>All Jobs </h2>\r\n          <p style={{color:'rebeccapurple'}}>Posted By Companies</p>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Name</th>\r\n                        <th>Company Name</th>\r\n                        <th>Designation</th>\r\n                        <th>Office Address</th>\r\n                        <th>Website</th>\r\n                        <th>Role</th>\r\n                        <th>Edit Details</th>\r\n                        <th>Delete</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {users.map(users=>\r\n                                <tr>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/job${users.id}`\r\n                                            }}>{users.firstName} {users.lastName}</Link></td>\r\n                                    <td>{users.companyName}</td>\r\n                                    <td>{users.userPost}</td>\r\n                                    <td>{users.officeAddress}</td>\r\n                                    <td>{users.companyWebsite}</td>\r\n                                    <td><Link onClick={() =>{changeUserRole(users.id,users.userRole)}} style={{color:'black'}}>{users.userRole}</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editJob${users.id}`\r\n                                            }}>Edit</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisUser(users.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                         {admins.map(admins=>\r\n                                <tr>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/job${admins.id}`\r\n                                            }}>{admins.firstName} {admins.lastName}</Link></td>\r\n                                    <td>{admins.companyName}</td>\r\n                                    <td>{admins.userPost}</td>\r\n                                    <td>{admins.officeAddress}</td>\r\n                                    <td><a style={{color:'black'}} href={admins.companyWebsite}\r\n                                        >{admins.companyWebsite}</a></td>\r\n                                    <td><Link onClick={() =>{changeUserRole(admins.id,admins.userRole)}} style={{color:'black'}}>{admins.userRole}</Link>\r\n                                    </td>\r\n                                    <td><Link style={{color:'black'}} to={{\r\n                                            pathname: `/editJob${admins.id}`\r\n                                            }}>Edit</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{deleteThisUser(admins.id)}} style={{color:'black'}}>Remove</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewAllCompaniesScreen);","E:\\reactjs\\jobszone\\src\\screens\\EditJobScreen.js",[],"E:\\reactjs\\jobszone\\src\\components\\EditJobForm.js",["255","256"],"import { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport React,{useEffect, useState} from 'react';\r\nimport { updateJob,updateJobCretaria, updateJobDescription, updateJobSkill } from '../graphql/mutations';\r\nimport { getJob } from '../graphql/queries';\r\nimport { useParams, withRouter } from 'react-router-dom';\r\n\r\nfunction EditJobForm(props){\r\n\r\n  const {jobId} =useParams();\r\n  const [userId,setUserId]=useState('');\r\n  const [discriptionFields, setDiscriptionFields] = useState([{ value: '',id:'' }]);\r\n  const [skillsFields, setSkillsFields] = useState([{ value: '',id:'' }]);\r\n  const [criteriaFields, setCriteriaFields] = useState([{ value: '',id:'' }]);\r\n  const [jobDetails,updateJobDetils]=useState({\r\n    jobTitle:'',jobName:'',companyName:'',companyWebsite:'',aboutCompany:'',\r\n    experience:'',salary:'',jobLocation:'',lastDate:''\r\n  });\r\n  useEffect(()=>{\r\n    const fetchJobCount= async()=>{\r\n      const userInfo=await Auth.currentAuthenticatedUser({bypassCache:true});\r\n      setUserId(userInfo.attributes.sub);\r\n      const oldJobData= await API.graphql(\r\n        graphqlOperation(\r\n          getJob,{\r\n            id:jobId\r\n          }\r\n        )\r\n      );\r\n      updateJobDetils({\r\n        jobTitle:oldJobData.data.getJob.jobTitle,\r\n        jobName:oldJobData.data.getJob.jobName,\r\n        companyName:oldJobData.data.getJob.companyName,\r\n        companyWebsite:oldJobData.data.getJob.companyWebsite,\r\n        aboutCompany:oldJobData.data.getJob.aboutCompany,\r\n        experience:oldJobData.data.getJob.experience,\r\n        salary:oldJobData.data.getJob.salary,\r\n        jobLocation:oldJobData.data.getJob.jobLocation,\r\n        lastDate:oldJobData.data.getJob.lastDate,\r\n\r\n      });\r\n      let discriptionFieldsCount = oldJobData.data.getJob.jobDescription.items.length;\r\n      let newDis=0;\r\n      let values = [];\r\n      while(newDis<discriptionFieldsCount){ \r\n        values.push({ \r\n          value: oldJobData.data.getJob.jobDescription.items[newDis].content,\r\n          id: oldJobData.data.getJob.jobDescription.items[newDis].id });\r\n        newDis=newDis+1;\r\n      }\r\n      setDiscriptionFields(values);\r\n      console.log(oldJobData);\r\n      let criteriaFieldsCount = oldJobData.data.getJob.jobCretaria.items.length;\r\n      let newCri=0;\r\n      values = [];\r\n      while(newCri<criteriaFieldsCount){    \r\n        values.push({ \r\n          value: oldJobData.data.getJob.jobCretaria.items[newCri].content,\r\n          id: oldJobData.data.getJob.jobCretaria.items[newCri].id});\r\n        newCri=newCri+1;\r\n      }\r\n      setCriteriaFields(values);\r\n      let skillsFieldsCount = oldJobData.data.getJob.jobSkills.items.length;\r\n      let newSki=0;\r\n      values=[];\r\n      while(newSki<skillsFieldsCount){ \r\n        values.push({ \r\n          value: oldJobData.data.getJob.jobSkills.items[newSki].content,\r\n          id: oldJobData.data.getJob.jobSkills.items[newSki].id });\r\n        newSki=newSki+1;\r\n      }\r\n      setSkillsFields(values)\r\n     }\r\n\r\n     fetchJobCount();\r\n\r\n  },[]);\r\n\r\n  function handleDiscriptionChange(i, event) {\r\n    const values = [...discriptionFields];\r\n    values[i].value = event.target.value;\r\n    setDiscriptionFields(values);\r\n  }\r\n\r\n\r\n  function handleSkillsChange(i, event) {\r\n    const values = [...skillsFields];\r\n    values[i].value = event.target.value;\r\n    setSkillsFields(values);\r\n  }\r\n\r\n\r\n  function handleCriteriaChange(i, event) {\r\n    const values = [...criteriaFields];\r\n    values[i].value = event.target.value;\r\n    setCriteriaFields(values);\r\n  }\r\n\r\n\r\n  function handleChange(evt) {\r\n    const value = evt.target.value;\r\n    updateJobDetils({\r\n      ...jobDetails,\r\n      [evt.target.name]: value\r\n    });\r\n  }\r\n   const createNewJob=async()=>{\r\n     await API.graphql(\r\n       graphqlOperation(\r\n         updateJob,{\r\n           input:{\r\n            id:jobId,\r\n            jobName:jobDetails.jobName,\r\n            jobType:\"job\",\r\n            jobUserId:userId,\r\n            jobStatus:\"created\",\r\n            jobTitle:jobDetails.jobTitle,\r\n            companyName:jobDetails.companyName,\r\n            companyWebsite:jobDetails.companyWebsite,\r\n            aboutCompany:jobDetails.aboutCompany,\r\n            experience:jobDetails.experience,\r\n            salary:jobDetails.salary,\r\n            jobLocation:jobDetails.jobLocation,\r\n            lastDate:jobDetails.lastDate\r\n           }\r\n         }\r\n       )\r\n     );\r\n     let lDis =discriptionFields.length;\r\n     let iDis=0;\r\n     while(iDis<lDis){\r\n     await API.graphql(\r\n       graphqlOperation(\r\n         updateJobDescription,{\r\n           input:{\r\n             id:discriptionFields[iDis].id,\r\n             content:discriptionFields[iDis].value\r\n           }\r\n         }\r\n       )\r\n     );\r\n     iDis=iDis+1;\r\n        }\r\n        let lSkil=skillsFields.length;\r\n        let iSkill=0\r\n        while(iSkill<lSkil){\r\n     await API.graphql(\r\n      graphqlOperation(\r\n        updateJobSkill,{\r\n          input:{\r\n            content:skillsFields[iSkill].value,\r\n            id:skillsFields[iSkill].id\r\n          }\r\n        }\r\n      )\r\n    );\r\n    iSkill=iSkill+1;\r\n      }\r\n      let lCri=criteriaFields.length;\r\n      let iCri=0;\r\n      while(iCri<lCri){\r\n    await API.graphql(\r\n      graphqlOperation(\r\n        updateJobCretaria,{\r\n          input:{\r\n            content:criteriaFields[iCri].value,\r\n            id:criteriaFields[iCri].id\r\n          }\r\n        }\r\n      )\r\n    );\r\n    iCri=iCri+1\r\n      }\r\n      alert(\"Sucessfully updated a job. Your Job will be active within 2 hrs, If not contact us.\");\r\n      props.history.push('/viewAllJobs');\r\n\r\n        }\r\n\r\n    return (\r\n\r\n\r\n    <div className=\"formContainer\">\r\n    <form >\r\n    <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n      <label htmlhtmlFor=\"job-title\">Job Title</label>\r\n      <input type=\"text\" value={jobDetails.jobTitle} onChange={handleChange} className=\"form-control\" name=\"jobTitle\" id=\"job-title\" placeholder=\"Enter Job Title\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"job-name\">Job Name</label>\r\n      <input type=\"text\" value={jobDetails.jobName} onChange={handleChange} className=\"form-control\" name=\"jobName\" id=\"job-name\" placeholder=\"Enter Job Name\" />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"company-name\">Company Name</label>\r\n      <input type=\"text\" value={jobDetails.companyName} onChange={handleChange} className=\"form-control\" name=\"companyName\" id=\"job-title\" placeholder=\"Enter Your Company Name\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"company-website\">Company Website</label>\r\n      <input type=\"text\" value={jobDetails.companyWebsite} onChange={handleChange} className=\"form-control\" name=\"companyWebsite\" id=\"job-website\" placeholder=\"Enter Company Official Website\" />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"about-company\">About Company</label>\r\n    <textarea className=\"form-control\" value={jobDetails.aboutCompany} onChange={handleChange} id=\"about-company\" name=\"aboutCompany\" rows=\"3\"></textarea>\r\n  </div>\r\n  <div className=\"form-row\">\r\n  <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"experience\">Experience Required</label>\r\n    <input type=\"text\" id=\"experience\" value={jobDetails.experience} onChange={handleChange}  name=\"experience\"className=\"form-control\" placeholder=\"Enter Experience Required For Job (eg:- 0-1years)\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n      <label htmlhtmlFor=\"salary\">Salary</label>\r\n      <input type=\"text\" value={jobDetails.salary} onChange={handleChange} className=\"form-control\" name=\"salary\" id=\"salary\" placeholder=\"Enter Salary Offered (eg:- 3 LPA )\" />\r\n    </div>   \r\n  </div>\r\n  <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"job-location\">Job Loaction</label>\r\n      <input type=\"text\" value={jobDetails.jobLocation} onChange={handleChange} className=\"form-control\" name=\"jobLocation\" id=\"job-location\" placeholder=\"Enter Job Location (for multiple enter Bengluru/Pune )\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlhtmlFor=\"last-date\">Last Date To Apply</label>\r\n      <input type=\"date\" value={jobDetails.lastDate} onChange={handleChange} className=\"form-control\" name=\"lastDate\" id=\"lastDate\"  />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"job-description\">Job Description </label>\r\n      {discriptionFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"jobDescription\"\r\n              placeholder=\"Describe Job\"\r\n              onChange={e => handleDiscriptionChange(idx, e)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"desired-skills\">Desired Skills  </label>\r\n      {skillsFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"desiredSkills\"\r\n              placeholder=\"Add desired skills required for Job\"\r\n              onChange={e => handleSkillsChange(idx, e)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"criteria\">Add Criteria </label>\r\n\r\n      {criteriaFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"criteria\"\r\n              placeholder=\"Enter criteria required for job\"\r\n              onChange={e => handleCriteriaChange(idx, e)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"text-center submitButton\">\r\n            <a onClick={createNewJob} style={{height:50,width:120,fontFamily:'sans-serif'}} name=\"addJob\" type=\"button\" className=\"btn btn-primary\">Update Job</a>\r\n          </div>\r\n</form>\r\n\r\n\r\n    </div>\r\n\r\n\r\n    );\r\n}\r\nexport default withRouter(EditJobForm);","E:\\reactjs\\jobszone\\src\\components\\EditInternshipForm.js",["257","258"],"import { API, Auth, graphqlOperation } from 'aws-amplify';\r\nimport React,{useEffect, useState} from 'react';\r\nimport { updateJob,updateJobCretaria, updateJobDescription, updateJobSkill, updatePerk } from '../graphql/mutations';\r\nimport { getJob } from '../graphql/queries';\r\nimport { useParams, withRouter } from 'react-router-dom';\r\n\r\nfunction EditInternshipForm(props){\r\n\r\n  const {jobId} =useParams();\r\n  const [userId,setUserId]=useState('');\r\n  const [discriptionFields, setDiscriptionFields] = useState([{ value: '',id:'' }]);\r\n  const [skillsFields, setSkillsFields] = useState([{ value: '',id:'' }]);\r\n  const [criteriaFields, setCriteriaFields] = useState([{ value: '',id:'' }]);\r\n  const [perksFields, setPerksFields] = useState([{ value: '',id:'' }]);\r\n  const [jobDetails,updateJobDetils]=useState({\r\n    jobTitle:'',jobName:'',companyName:'',companyWebsite:'',aboutCompany:'',\r\n    duration:'',salary:'',jobLocation:'',lastDate:'',positions:0\r\n  });\r\n  useEffect(()=>{\r\n    const fetchJobCount= async()=>{\r\n      const userInfo=await Auth.currentAuthenticatedUser({bypassCache:true});\r\n      setUserId(userInfo.attributes.sub);\r\n      const oldJobData= await API.graphql(\r\n        graphqlOperation(\r\n          getJob,{\r\n            id:jobId\r\n          }\r\n        )\r\n      );\r\n      updateJobDetils({\r\n        jobTitle:oldJobData.data.getJob.jobTitle,\r\n        jobName:oldJobData.data.getJob.jobName,\r\n        companyName:oldJobData.data.getJob.companyName,\r\n        companyWebsite:oldJobData.data.getJob.companyWebsite,\r\n        aboutCompany:oldJobData.data.getJob.aboutCompany,\r\n        positions:oldJobData.data.getJob.noOfPosition,\r\n        duration:oldJobData.data.getJob.duration,\r\n        salary:oldJobData.data.getJob.salary,\r\n        jobLocation:oldJobData.data.getJob.jobLocation,\r\n        lastDate:oldJobData.data.getJob.lastDate,\r\n\r\n      });\r\n      let discriptionFieldsCount = oldJobData.data.getJob.jobDescription.items.length;\r\n      let newDis=0;\r\n      let values = [];\r\n      while(newDis<discriptionFieldsCount){ \r\n        values.push({ \r\n          value: oldJobData.data.getJob.jobDescription.items[newDis].content,\r\n          id: oldJobData.data.getJob.jobDescription.items[newDis].id });\r\n        newDis=newDis+1;\r\n      }\r\n      setDiscriptionFields(values);\r\n      let criteriaFieldsCount = oldJobData.data.getJob.jobCretaria.items.length;\r\n      let newCri=0;\r\n      values = [];\r\n      while(newCri<criteriaFieldsCount){    \r\n        values.push({ \r\n          value: oldJobData.data.getJob.jobCretaria.items[newCri].content,\r\n          id: oldJobData.data.getJob.jobCretaria.items[newCri].id});\r\n        newCri=newCri+1;\r\n      }\r\n      setCriteriaFields(values);\r\n      let skillsFieldsCount = oldJobData.data.getJob.jobSkills.items.length;\r\n      let newSki=0;\r\n      values=[];\r\n      while(newSki<skillsFieldsCount){ \r\n        values.push({ \r\n          value: oldJobData.data.getJob.jobSkills.items[newSki].content,\r\n          id: oldJobData.data.getJob.jobSkills.items[newSki].id });\r\n        newSki=newSki+1;\r\n      }\r\n      setSkillsFields(values)\r\n      let perksFieldsCount = oldJobData.data.getJob.perks.items.length;\r\n      let newPerk=0;\r\n      values=[];\r\n      while(newPerk<perksFieldsCount){ \r\n        values.push({ \r\n          value: oldJobData.data.getJob.perks.items[newPerk].content,\r\n          id: oldJobData.data.getJob.perks.items[newPerk].id });\r\n        newPerk=newPerk+1;\r\n      }\r\n      setPerksFields(values);\r\n     }\r\n     \r\n\r\n     fetchJobCount();\r\n\r\n  },[]);\r\n\r\n  function handleDiscriptionChange(i, event) {\r\n    const values = [...discriptionFields];\r\n    values[i].value = event.target.value;\r\n    setDiscriptionFields(values);\r\n  }\r\n\r\n\r\n  function handleSkillsChange(i, event) {\r\n    const values = [...skillsFields];\r\n    values[i].value = event.target.value;\r\n    setSkillsFields(values);\r\n  }\r\n\r\n\r\n  function handleCriteriaChange(i, event) {\r\n    const values = [...criteriaFields];\r\n    values[i].value = event.target.value;\r\n    setCriteriaFields(values);\r\n  }\r\n\r\n  function handlePerksChange(i, event) {\r\n    const values = [...perksFields];\r\n    values[i].value = event.target.value;\r\n    setPerksFields(values);\r\n  }\r\n\r\n  function handleChange(evt) {\r\n    const value = evt.target.value;\r\n    updateJobDetils({\r\n      ...jobDetails,\r\n      [evt.target.name]: value\r\n    });\r\n  }\r\n   const createNewJob=async()=>{\r\n     await API.graphql(\r\n       graphqlOperation(\r\n         updateJob,{\r\n           input:{\r\n            id:jobId,\r\n            jobName:jobDetails.jobName,\r\n            jobTitle:jobDetails.jobTitle,\r\n            jobType:\"internship\",\r\n            jobStatus:\"created\",\r\n            jobUserId:userId,\r\n            companyName:jobDetails.companyName,\r\n            companyWebsite:jobDetails.companyWebsite,\r\n            aboutCompany:jobDetails.aboutCompany,\r\n            duration:jobDetails.duration,\r\n            noOfPosition:jobDetails.positions,\r\n            salary:jobDetails.salary,\r\n            jobLocation:jobDetails.jobLocation,\r\n            lastDate:jobDetails.lastDate\r\n           }\r\n         }\r\n       )\r\n     );\r\n     let lDis =discriptionFields.length;\r\n     let iDis=0;\r\n     while(iDis<lDis){\r\n     await API.graphql(\r\n       graphqlOperation(\r\n         updateJobDescription,{\r\n           input:{\r\n             id:discriptionFields[iDis].id,\r\n             content:discriptionFields[iDis].value\r\n           }\r\n         }\r\n       )\r\n     );\r\n     iDis=iDis+1;\r\n        }\r\n        let lSkil=skillsFields.length;\r\n        let iSkill=0\r\n        while(iSkill<lSkil){\r\n     await API.graphql(\r\n      graphqlOperation(\r\n        updateJobSkill,{\r\n          input:{\r\n            content:skillsFields[iSkill].value,\r\n            id:skillsFields[iSkill].id\r\n          }\r\n        }\r\n      )\r\n    );\r\n    iSkill=iSkill+1;\r\n      }\r\n      let lCri=criteriaFields.length;\r\n      let iCri=0;\r\n      while(iCri<lCri){\r\n    await API.graphql(\r\n      graphqlOperation(\r\n        updateJobCretaria,{\r\n          input:{\r\n            content:criteriaFields[iCri].value,\r\n            id:criteriaFields[iCri].id\r\n          }\r\n        }\r\n      )\r\n    );\r\n    iCri=iCri+1\r\n      }\r\n      let lPerks=perksFields.length;\r\n     let iPerks=0;\r\n     while(iPerks<lPerks){\r\n   await API.graphql(\r\n     graphqlOperation(\r\n       updatePerk,{\r\n         input:{\r\n           content:perksFields[iPerks].value,\r\n           id:perksFields[iPerks].id\r\n         }\r\n       }\r\n     )\r\n   );\r\n   iPerks=iPerks+1\r\n     }\r\n      alert(\"Sucessfully updated a job. Your Job will be active within 2 hrs, If not contact us.\");\r\n      props.history.push('/viewAllJobs');\r\n\r\n        }\r\n\r\n    return (\r\n\r\n\r\n    <div className=\"formContainer\">\r\n    <form >\r\n    <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n      <label htmlFor=\"job-title\">Job Title</label>\r\n      <input type=\"text\" value={jobDetails.jobTitle} onChange={handleChange} className=\"form-control\" name=\"jobTitle\" id=\"job-title\" placeholder=\"Enter Job Title\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlFor=\"job-name\">Job Name</label>\r\n      <input type=\"text\" value={jobDetails.jobName} onChange={handleChange} className=\"form-control\" name=\"jobName\" id=\"job-name\" placeholder=\"Enter Job Name\" />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlFor=\"company-name\">Company Name</label>\r\n      <input type=\"text\" value={jobDetails.companyName} onChange={handleChange} className=\"form-control\" name=\"companyName\" id=\"job-title\" placeholder=\"Enter Your Company Name\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlFor=\"company-website\">Company Website</label>\r\n      <input type=\"text\" value={jobDetails.companyWebsite} onChange={handleChange} className=\"form-control\" name=\"companyWebsite\" id=\"job-website\" placeholder=\"Enter Company Official Website\" />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"about-company\">About Company</label>\r\n    <textarea className=\"form-control\" value={jobDetails.aboutCompany} onChange={handleChange} id=\"about-company\" name=\"aboutCompany\" rows=\"3\"></textarea>\r\n  </div>\r\n  <div className=\"form-row\">\r\n  <div className=\"form-group col-md-6\">\r\n      <label htmlFor=\"Duration\">Duration</label>\r\n      <input type=\"text\" className=\"form-control\" value={jobDetails.duration} onChange={handleChange} name=\"duration\" id=\"duration\" placeholder=\"Enter Internship Duration (eg:- 2 months or 12 weeks )\" />\r\n    </div>  \r\n    <div className=\"form-group col-md-6\">\r\n      <label htmlFor=\"salary\">Stipend</label>\r\n      <input type=\"text\" className=\"form-control\" value={jobDetails.salary} onChange={handleChange} name=\"salary\" id=\"stipend\" placeholder=\"Enter Stipend Offered (eg:- 10000 /month or unpaid )\" />\r\n    </div>   \r\n  </div>\r\n  <div className=\"form-row\">\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlFor=\"internship-location\">Internship Loaction</label>\r\n      <input type=\"text\" className=\"form-control\" value={jobDetails.jobLocation} onChange={handleChange} name=\"jobLocation\" id=\"internship-location\" placeholder=\"Enter Internship Location (for multiple enter Bengluru/Pune )\" />\r\n    </div>\r\n    <div className=\"form-group col-md-6\">\r\n    <label htmlFor=\"last-date\">Last Date To Apply</label>\r\n      <input type=\"date\" className=\"form-control\" value={jobDetails.lastDate} onChange={handleChange} name=\"lastDate\" id=\"lastDate\"  />\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"positions\">No Of Postions</label>\r\n    <input type=\"number\" className=\"form-control\" value={jobDetails.positions} onChange={handleChange} id=\"positions\" name=\"positions\" min={1} max={1000000}/>\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"job-description\">Job Description </label>\r\n      {discriptionFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"jobDescription\"\r\n              placeholder=\"Describe Job\"\r\n              onChange={e => handleDiscriptionChange(idx, e)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"desired-skills\">Desired Skills  </label>\r\n      {skillsFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"desiredSkills\"\r\n              placeholder=\"Add desired skills required for Job\"\r\n              onChange={e => handleSkillsChange(idx, e)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlhtmlFor=\"criteria\">Add Criteria </label>\r\n\r\n      {criteriaFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"criteria\"\r\n              placeholder=\"Enter criteria required for job\"\r\n              onChange={e => handleCriteriaChange(idx, e)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"form-group\">\r\n    <label htmlFor=\"desired-skills\">Perks (add multiple lines) </label>\r\n\r\n      {perksFields.map((field, idx) => {\r\n        return (\r\n          <div key={`${field}-${idx}`}>\r\n            <input\r\n              style={{marginTop:10,marginBottom:5}}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={field.value}\r\n              name=\"perks\"\r\n              placeholder=\"Add perks of doing Internship\"\r\n              onChange={e => handlePerksChange(idx, e)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n  </div>\r\n  <div className=\"text-center submitButton\">\r\n            <a onClick={createNewJob} style={{height:50,width:120,fontFamily:'sans-serif'}} name=\"addJob\" type=\"button\" className=\"btn btn-primary\">Update Job</a>\r\n          </div>\r\n</form>\r\n\r\n\r\n    </div>\r\n\r\n\r\n    );\r\n}\r\nexport default withRouter(EditInternshipForm);","E:\\reactjs\\jobszone\\src\\screens\\EditInternshipScreen.js",[],"E:\\reactjs\\jobszone\\src\\screens\\ViewAllJobApplicantsScreen.js",["259","260"],"import React, { useEffect, useState } from 'react';\r\nimport './authStyle.css';\r\nimport logo from '../images/logo.png';\r\nimport { API, graphqlOperation, Storage } from 'aws-amplify';\r\nimport {listJobApplicants} from '../graphql/queries';\r\n\r\nimport {Link, useParams, withRouter} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { updateJobApplicant } from '../graphql/mutations';\r\n\r\nfunction ViewAllJobApplicantsScreen(props){\r\n    const {jobId} =useParams();\r\n    const [jobApplicants,setJobApplicants]=useState([]);\r\n    useEffect(()=>{\r\n        try{\r\n          const getJobApplicant=async()=>{\r\n          const AllApplicants=await API.graphql(\r\n            graphqlOperation(\r\n              listJobApplicants,{\r\n                filter:{\r\n                  jobID: {contains: jobId}\r\n                }\r\n              }\r\n            )\r\n          )\r\n          setJobApplicants(AllApplicants.data.listJobApplicants.items)\r\n         \r\n          }\r\n        \r\n          getJobApplicant();\r\n        }\r\n        catch(e){\r\n          console.log(e)\r\n    \r\n        }\r\n    \r\n      },[]);\r\n      const getResumeUrl=async(resumeFile)=>{\r\n        const resumeUrl=await Storage.get(resumeFile);\r\n        console.log(resumeUrl);\r\n        window.open(resumeUrl, '_blank', 'noopener,noreferrer')\r\n        \r\n      }\r\n      const changeStatus=async(appliactionId,status)=>{\r\n          if(status===\"Applied\"){\r\n              await API.graphql(\r\n                  graphqlOperation(\r\n                      updateJobApplicant,\r\n                      {\r\n                        input:{\r\n                            id:appliactionId,\r\n                            applicationStatus:\"In-Touch\"\r\n                        }\r\n                    }\r\n                  )\r\n              )\r\n          }\r\n          if(status===\"In-Touch\"){\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    updateJobApplicant,\r\n                    {\r\n                      input:{\r\n                          id:appliactionId,\r\n                          applicationStatus:\"Selected\"\r\n                      }\r\n                  }\r\n                )\r\n            )\r\n        }\r\n        if(status===\"Selected\"){\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    updateJobApplicant,\r\n                    {\r\n                      input:{\r\n                          id:appliactionId,\r\n                          applicationStatus:\"Rejected\"\r\n                      }\r\n                  }\r\n                )\r\n            )\r\n        }\r\n        if(status===\"Rejected\"){\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    updateJobApplicant,\r\n                    {\r\n                      input:{\r\n                          id:appliactionId,\r\n                          applicationStatus:\"Applied\"\r\n                      }\r\n                  }\r\n                )\r\n            )\r\n        }\r\n        window.location.reload();\r\n\r\n      }\r\n\r\n    return (\r\n        <div className=\"admin\">\r\n        <header className=\"admin__header\">\r\n          <a href=\"/viewAllJobs\"><img style={{height:120,width:250}} className=\"logo\" src={logo} alt=\"\" /></a>\r\n          <div className=\"toolbar\">\r\n            <h3 style={{color:'white'}}>.</h3>\r\n            <a href=\"#\" className=\"logout\">\r\n              Log Out\r\n            </a>\r\n          </div>\r\n        </header>\r\n        <nav className=\"admin__nav\">\r\n    <ul className=\"menu\">\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"admin\">Dashboard</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"approveJobs\">View all jobs requests</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminJobs\">View jobs</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createJob\">Create a new Job</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"adminInternship\">View internships</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"createInternship\">Create a new internship</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllUsers\">View All users</a>\r\n      </li>\r\n      <li className=\"menu__item\">\r\n        <a className=\"menu__link\" href=\"viewAllCompanies\">View All Companies</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n        <main className=\"admin__main\">\r\n\r\n          <h2 style={{color:'rebeccapurple'}}>All Applicants </h2>\r\n          <p style={{color:'rebeccapurple'}}>For job/internship</p>\r\n          <div className=\"dashboard\">\r\n          <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                     <tr>\r\n                        <th>Name</th>\r\n                        <th>College</th>\r\n                        <th>Email</th>\r\n                        <th>Mobile No.</th>\r\n                        <th>Applied Date</th>\r\n                        <th>Status</th>\r\n                        <th>View Resume</th>\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {jobApplicants.map(jobApplicants=>\r\n                     \r\n                                <tr>\r\n                                    <td>{jobApplicants.user.firstName} {jobApplicants.user.lastName}</td>\r\n                                    <td>{jobApplicants.user.collegeName}</td>\r\n                                    <td>{jobApplicants.user.email}</td>\r\n                                    <td>{jobApplicants.user.mobileNo}</td>\r\n                                    <td>{moment(jobApplicants.createdAt).format('ll')}</td>\r\n                                    <td><Link onClick={() =>{changeStatus(jobApplicants.id,jobApplicants.applicationStatus)}} style={{color:'black'}}>{jobApplicants.applicationStatus}</Link>\r\n                                    </td>\r\n                                    <td><Link onClick={() =>{getResumeUrl(jobApplicants.user.resumeFile)}} style={{color:'black'}}>View</Link>\r\n                                    </td>\r\n                                </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n         \r\n         \r\n          </div>\r\n        </main>\r\n        <footer className=\"admin__footer\">\r\n          <span>\r\n            &copy; 2021 JobsZone\r\n          </span>\r\n        </footer>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(ViewAllJobApplicantsScreen);",{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":8,"column":15,"nodeType":"267","messageId":"268","endLine":8,"endColumn":19},{"ruleId":"269","severity":1,"message":"270","line":303,"column":13,"nodeType":"271","endLine":303,"endColumn":149},{"ruleId":"272","severity":1,"message":"273","line":43,"column":5,"nodeType":"274","endLine":43,"endColumn":7,"suggestions":"275"},{"ruleId":"265","severity":1,"message":"276","line":12,"column":10,"nodeType":"267","messageId":"268","endLine":12,"endColumn":19},{"ruleId":"272","severity":1,"message":"273","line":56,"column":5,"nodeType":"274","endLine":56,"endColumn":7,"suggestions":"277"},{"ruleId":"269","severity":1,"message":"278","line":94,"column":13,"nodeType":"271","endLine":94,"endColumn":40},{"ruleId":"269","severity":1,"message":"278","line":92,"column":13,"nodeType":"271","endLine":92,"endColumn":40},{"ruleId":"272","severity":1,"message":"273","line":37,"column":7,"nodeType":"274","endLine":37,"endColumn":9,"suggestions":"279"},{"ruleId":"269","severity":1,"message":"278","line":106,"column":13,"nodeType":"271","endLine":106,"endColumn":40},{"ruleId":"272","severity":1,"message":"280","line":61,"column":5,"nodeType":"274","endLine":61,"endColumn":7,"suggestions":"281"},{"ruleId":"261","replacedBy":"282"},{"ruleId":"263","replacedBy":"283"},{"ruleId":"269","severity":1,"message":"278","line":47,"column":7,"nodeType":"271","endLine":47,"endColumn":34},{"ruleId":"265","severity":1,"message":"266","line":4,"column":15,"nodeType":"267","messageId":"268","endLine":4,"endColumn":19},{"ruleId":"269","severity":1,"message":"278","line":90,"column":13,"nodeType":"271","endLine":90,"endColumn":40},{"ruleId":"269","severity":1,"message":"278","line":87,"column":13,"nodeType":"271","endLine":87,"endColumn":40},{"ruleId":"265","severity":1,"message":"284","line":11,"column":12,"nodeType":"267","messageId":"268","endLine":11,"endColumn":17},{"ruleId":"269","severity":1,"message":"278","line":70,"column":13,"nodeType":"271","endLine":70,"endColumn":40},{"ruleId":"265","severity":1,"message":"266","line":4,"column":15,"nodeType":"267","messageId":"268","endLine":4,"endColumn":19},{"ruleId":"265","severity":1,"message":"285","line":5,"column":9,"nodeType":"267","messageId":"268","endLine":5,"endColumn":17},{"ruleId":"265","severity":1,"message":"286","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":19},{"ruleId":"269","severity":1,"message":"278","line":56,"column":13,"nodeType":"271","endLine":56,"endColumn":40},{"ruleId":"265","severity":1,"message":"266","line":4,"column":15,"nodeType":"267","messageId":"268","endLine":4,"endColumn":19},{"ruleId":"265","severity":1,"message":"285","line":5,"column":9,"nodeType":"267","messageId":"268","endLine":5,"endColumn":17},{"ruleId":"265","severity":1,"message":"287","line":7,"column":8,"nodeType":"267","messageId":"268","endLine":7,"endColumn":14},{"ruleId":"265","severity":1,"message":"286","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":19},{"ruleId":"269","severity":1,"message":"278","line":93,"column":13,"nodeType":"271","endLine":93,"endColumn":40},{"ruleId":"272","severity":1,"message":"273","line":76,"column":5,"nodeType":"274","endLine":76,"endColumn":7,"suggestions":"288"},{"ruleId":"269","severity":1,"message":"270","line":283,"column":13,"nodeType":"271","endLine":283,"endColumn":149},{"ruleId":"272","severity":1,"message":"273","line":88,"column":5,"nodeType":"274","endLine":88,"endColumn":7,"suggestions":"289"},{"ruleId":"269","severity":1,"message":"270","line":339,"column":13,"nodeType":"271","endLine":339,"endColumn":149},{"ruleId":"272","severity":1,"message":"273","line":37,"column":9,"nodeType":"274","endLine":37,"endColumn":11,"suggestions":"290"},{"ruleId":"269","severity":1,"message":"278","line":107,"column":13,"nodeType":"271","endLine":107,"endColumn":40},"no-native-reassign",["291"],"no-negated-in-lhs",["292"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'jobId'. Either include it or remove the dependency array.","ArrayExpression",["293"],"'isApplied' is assigned a value but never used.",["294"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["295"],"React Hook useEffect has a missing dependency: 'searchTerm'. Either include it or remove the dependency array.",["296"],["291"],["292"],"'jobId' is assigned a value but never used.","'listJobs' is defined but never used.","'deleteJob' is defined but never used.","'moment' is defined but never used.",["297"],["298"],["299"],"no-global-assign","no-unsafe-negation",{"desc":"300","fix":"301"},{"desc":"300","fix":"302"},{"desc":"300","fix":"303"},{"desc":"304","fix":"305"},{"desc":"300","fix":"306"},{"desc":"300","fix":"307"},{"desc":"300","fix":"308"},"Update the dependencies array to be: [jobId]",{"range":"309","text":"310"},{"range":"311","text":"310"},{"range":"312","text":"310"},"Update the dependencies array to be: [searchTerm]",{"range":"313","text":"314"},{"range":"315","text":"310"},{"range":"316","text":"310"},{"range":"317","text":"310"},[1210,1212],"[jobId]",[1639,1641],[1028,1030],[1861,1863],"[searchTerm]",[3011,3013],[3524,3526],[1083,1085]]